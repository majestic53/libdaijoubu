/**
 * libdaijoubu
 * Copyright (C) 2015 David Jolly
 * ----------------------
 *
 * libdaijoubu is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * libdaijoubu is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef DAIJOUBU_LANGUAGE_H_
#define DAIJOUBU_LANGUAGE_H_

namespace DAIJOUBU {

	namespace LANGUAGE {

		#define DAIJOUBU_CHARACTER(_CH_) ((wchar_t) _CH_)
		#define DAIJOUBU_COMMENT_BLOCK_CLOSE DAIJOUBU_CHARACTER(L'】')
		#define DAIJOUBU_COMMENT_BLOCK_CLOSE_SIMPLE DAIJOUBU_CHARACTER(L']')
		#define DAIJOUBU_COMMENT_BLOCK_OPEN DAIJOUBU_CHARACTER(L'【')
		#define DAIJOUBU_COMMENT_BLOCK_OPEN_SIMPLE DAIJOUBU_CHARACTER(L'[')
		#define DAIJOUBU_COMMENT_LINE DAIJOUBU_CHARACTER(L'※')
		#define DAIJOUBU_COMMENT_LINE_SIMPLE DAIJOUBU_CHARACTER(L'#')
		#define DAIJOUBU_LITERAL_STRING_CLOSE DAIJOUBU_CHARACTER(L'”')
		#define DAIJOUBU_LITERAL_STRING_OPEN DAIJOUBU_CHARACTER(L'“')

		enum {
			DAIJOUBU_CONSTANT_E = 0,
			DAIJOUBU_CONSTANT_NULL,
			DAIJOUBU_CONSTANT_PI,
		};

		#define DAIJOUBU_CONSTANT_MAX DAIJOUBU_CONSTANT_PI

		enum {
			DAIJOUBU_CONTROL_BREAK = 0,
			DAIJOUBU_CONTROL_CONTINUE,
			DAIJOUBU_CONTROL_ELSE,
			DAIJOUBU_CONTROL_FINAL,
			DAIJOUBU_CONTROL_FOR,
			DAIJOUBU_CONTROL_IF,
			DAIJOUBU_CONTROL_RETURN,
			DAIJOUBU_CONTROL_SHOW,
			DAIJOUBU_CONTROL_SWITCH,
		};

		#define DAIJOUBU_CONTROL_MAX DAIJOUBU_CONTROL_SWITCH

		enum {
			DAIJOUBU_LITERAL_BOOLEAN_FALSE = 0,
			DAIJOUBU_LITERAL_BOOLEAN_TRUE,
		};

		#define DAIJOUBU_LITERAL_BOOLEAN_MAX DAIJOUBU_LITERAL_BOOLEAN_TRUE

		enum {
			DAIJOUBU_OPERATOR_ADDITION = 0,
			DAIJOUBU_OPERATOR_ARC_COSECANT,
			DAIJOUBU_OPERATOR_ARC_COSINE,
			DAIJOUBU_OPERATOR_ARC_COTANGENT,
			DAIJOUBU_OPERATOR_ARC_SECANT,
			DAIJOUBU_OPERATOR_ARC_SINE,
			DAIJOUBU_OPERATOR_ARC_TANGENT,
			DAIJOUBU_OPERATOR_CARDINALITY,
			DAIJOUBU_OPERATOR_CEILING,
			DAIJOUBU_OPERATOR_COSECANT,
			DAIJOUBU_OPERATOR_COSINE,
			DAIJOUBU_OPERATOR_DISTANCE,
			DAIJOUBU_OPERATOR_DIVISION,
			DAIJOUBU_OPERATOR_EQUALS,
			DAIJOUBU_OPERATOR_EXPONENT,
			DAIJOUBU_OPERATOR_FACTORIAL,
			DAIJOUBU_OPERATOR_FLOOR,
			DAIJOUBU_OPERATOR_GENERIC_0,
			DAIJOUBU_OPERATOR_GENERIC_1,
			DAIJOUBU_OPERATOR_GENERIC_2,
			DAIJOUBU_OPERATOR_GENERIC_3,
			DAIJOUBU_OPERATOR_GENERIC_4,
			DAIJOUBU_OPERATOR_GENERIC_5,
			DAIJOUBU_OPERATOR_GENERIC_6,
			DAIJOUBU_OPERATOR_GREATER_THAN,
			DAIJOUBU_OPERATOR_GREATER_THAN_EQUALS,
			DAIJOUBU_OPERATOR_INDEX_OF,
			DAIJOUBU_OPERATOR_LESS_THAN,
			DAIJOUBU_OPERATOR_LESS_THAN_EQUALS,
			DAIJOUBU_OPERATOR_LOGARITHM,
			DAIJOUBU_OPERATOR_LOGICAL_AND,
			DAIJOUBU_OPERATOR_LOGICAL_NEGATION,
			DAIJOUBU_OPERATOR_LOGICAL_OR,
			DAIJOUBU_OPERATOR_LOGICAL_XOR,
			DAIJOUBU_OPERATOR_MAP,
			DAIJOUBU_OPERATOR_MEMBERSHIP,
			DAIJOUBU_OPERATOR_MODULO,
			DAIJOUBU_OPERATOR_MULTIPLICATION,
			DAIJOUBU_OPERATOR_NATURAL_LOGARITHM,
			DAIJOUBU_OPERATOR_NOT_EQUALS,
			DAIJOUBU_OPERATOR_RANDOM,
			DAIJOUBU_OPERATOR_SECANT,
			DAIJOUBU_OPERATOR_SINE,
			DAIJOUBU_OPERATOR_SQUARE_ROOT,
			DAIJOUBU_OPERATOR_SUBTRACTION,
			DAIJOUBU_OPERATOR_TANGENT,
			DAIJOUBU_OPERATOR_TERNARY_CONDITIONAL,
			DAIJOUBU_OPERATOR_UNARY_DECREMENT,
			DAIJOUBU_OPERATOR_UNARY_INCREMENT,
		};

		#define DAIJOUBU_LITERAL_MAX DAIJOUBU_OPERATOR_UNARY_INCREMENT

		typedef enum {
			DAIJOUBU_RADIX_36 = 0,
			DAIJOUBU_RADIX_BINARY,
			DAIJOUBU_RADIX_DECIMAL,
			DAIJOUBU_RADIX_HEXIDECIMAL,
			DAIJOUBU_RADIX_OCTAL,
		} daijoubu_radix_t;

		#define DAIJOUBU_RADIX_MAX DAIJOUBU_RADIX_OCTAL

		
		enum {
			DAIJOUBU_SYMBOL_ACCESS_BRACKET_CLOSE = 0,
			DAIJOUBU_SYMBOL_ACCESS_BRACKET_OPEN,
			DAIJOUBU_SYMBOL_ARGUMENT_DELIMITER,
			DAIJOUBU_SYMBOL_ASSIGNMENT,
			DAIJOUBU_SYMBOL_ASSIGNMENT_SWAP,
			DAIJOUBU_SYMBOL_BLOCK_BRACKET_CLOSE,
			DAIJOUBU_SYMBOL_BLOCK_BRACKET_OPEN,
			DAIJOUBU_SYMBOL_CONTEXT_SEPERATOR,
			DAIJOUBU_SYMBOL_FOLLOW,
			DAIJOUBU_SYMBOL_FUNCTION_BRACKET_CLOSE,
			DAIJOUBU_SYMBOL_FUNCTION_BRACKET_OPEN,
			DAIJOUBU_SYMBOL_MEMBER_ACCESS,
			DAIJOUBU_SYMBOL_POINTER,
			DAIJOUBU_SYMBOL_STATEMENT_DELIMITER,
			DAIJOUBU_SYMBOL_STATEMENT_TERMINATOR,
			DAIJOUBU_SYMBOL_TERNARY_DELIMITER,
		};

		#define DAIJOUBU_SYMBOL_MAX DAIJOUBU_SYMBOL_TERNARY_DELIMITER
		

		enum {
			DAIJOUBU_TYPE_BOOLEAN = 0,
			DAIJOUBU_TYPE_BYTE,
			DAIJOUBU_TYPE_BYTE_UNSIGNED,
			DAIJOUBU_TYPE_FLOAT,
			DAIJOUBU_TYPE_INTEGER,
			DAIJOUBU_TYPE_INTEGER_UNSIGNED,
			DAIJOUBU_TYPE_STRING,
		};

		#define DAIJOUBU_TYPE_MAX DAIJOUBU_TYPE_STRING

		extern uint32_t string_as_value(
			__in const std::string &input,
			__in daijoubu_radix_t radix
			);

		extern uint32_t unicode_string_as_value(
			__in const std::wstring &input,
			__in daijoubu_radix_t radix
			);
	}
}

#endif // DAIJOUBU_LANGUAGE_H_
