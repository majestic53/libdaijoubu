Daijoubu Lexer Grammar

CLASSES: begin, constant, control, end, identifier, modifier, literal_boolean, literal_numeric, literal_string, 
		operator, subscript, superscript, symbol, type

---

[X] constant ::= 'e' | 'π' | 'null'

[X] control ::= 'break' | 'continue' | 'elif' | 'else' | 'final' | 'for' | 'if' | 'return' 
		| 'show' | 'switch'

[X] identifier ::= [<Ll>|<Lm>|<Lo>|<Lt>|<Lu>|<Nl>|'_'] [<Cf>|<Ll>|<Lm>|<Lo>|<Lt>|<Lu>|<Mc>|<Mn>|<Nd>|<Nl>|<Pc>|'_']*

[X] modifier ::= <Lm> | '₋' | '₊' | '₌'

[X] literal_boolean ::= 'false' | 'true'

[X] literal_numeric ::= ['-']?[0-9]+[.[0-9]*]? | '0b'[0-1]+ | '0o'[0-7]+ | '0h'[0-9A-F]

[X] literal_string ::= '“'<UTF8_char>*'”'

[X] operator ::= '+'		// addition
	| 'arccsc'		// arc-cosecant
	| 'arccos'		// arc-cosine
	| 'arccot'		// arc-cotangent
	| 'arcsec'		// arc-secant
	| 'arcsin'		// arc-sine
	| 'arctan'		// arc-tangent
	| '#'			// cardinality
	| '⊤'		('+%')	// ceiling (also greater of)
	| '✓'		('?:')	// coalescence
	| 'csc'			// cosecant
	| 'cos'			// cosine
	| '↔'		('<_>')	// distance (also outer map)
	| '/'			// division
	| '='			// equals
	| '^'			// exponent
	| '!'			// factorial
	| '⊥'		('-%')	// floor (also lesser of)
	| '⊙'		('@!')	// generic 0
	| '⊕'		('@@')	// generic 1
	| '⊖'		('@$')	// generic 2
	| '⊗'		('@%')	// generic 3
	| '⊘'		('@^')	// generic 4
	| '⊜'		('@&')	// generic 5
	| '⌾'		('@*')	// generic 6
	| '⍒'		(TBD)	// grade down
	| '⍋'		(TBD)	// grade up
	| '>'			// greater than
	| '≥'		('>=')	// greater than, equals
	| '⍷'		('.=')	// index of
	| '∩'		(TBD)	// intersection
	| '<'			// less than
	| '≤'		('<=')	// less than, equals
	| 'log'			// logarithm
	| '∧'		('&&')	// logical and
	| '¬'		('~')	// logical negation
	| '∨'		('||')	// logical or
	| '⊻'		('><')	// logical xor
	| '↦'		('_>')	// map
	| '∈'		('?=')	// membership
	| '%'			// modulo
	| '⋅'		('*')	// multiplication
	| 'ln'			// natural logarithm
	| '≠'		('~=')	// not equals
	| '☘'		('??')	// random
	| '…'		('..')	// range
	| 'sec'			// secant
	| 'sin'			// sine
	| '√'		('~^')	// square root
	| '−'		('-')	// subtraction
	| 'tan'			// tangent
	| '?'			// ternary conditional
	| '¦'		('--')	// unary decrement
	| '‡'		('++')	// unary increment
	| '∪'		(TBD)	// union

[X] subscript ::= [₀-₉]+

[X] superscript ::= [⁰-⁹]+

[X] symbol ::= ']'		// access bracket close
	| '['			// access bracket open
	| ','			// argument delimiter
	| '⇐'		('<-')	// assignment
	| '⇔'		('<->')	// assignment swap
	| '∅'		(TBD)	// empty set
	| '}'			// block bracket close
	| '{'			// block bracket open
	| '|'			// context separator
	| '''			// follow
	| ')'			// function bracket close (also precedence bracket close)
	| '('			// function bracket open (also precedence bracket open)
	| '.'			// member access
	| '*'		('&')	// pointer
	| ';'			// statement terminator
	| ':'			// ternary delimiter

[X] type ::= 'bool' | 'byte' | 'float' | 'int' | 'string' | 'ubyte' | 'uint'

unused ::= '∠' 	(TBD)	// angle
	| '≈' 		(TBD)	// approximately equal
	| '⬛' 		(TBD)	// black large square
	| '∘' 		(TBD)	// circle operator
	| '⁄' 		(TBD)	// combining solidus
	| '†' 		(TBD)	// dagger
	| '°' 		(TBD)	// degree
	| '‖' 		(TBD)	// double vertical bar
	| '♫'		(TBD)	// eighths note
	| '—' 		(TBD)	// em dash
	| '≡' 		(TBD)	// equivalent
	| '█' 		(TBD)	// full block
	| '»' 		(TBD)	// guillemet close
	| '«' 		(TBD)	// guillemet open
	| '⌂' 		(TBD)	// house
	| '☞' 		(TBD)	// index
	| '∞' 		(TBD)	// infinity
	| '∫' 		(TBD)	// integral
	| '‽' 		(TBD)	// interrobang
	| '⸮' 		(TBD)	// irony
	| '◊' 		(TBD)	// lozenge
	| '∇'		(TBD)	// nabla
	| '∂'		(TBD)	// partial derivative
	| '¶' 		(TBD)	// pilcrow
	| '±' 		(TBD)	// plus-minus
	| '∝' 		(TBD)	// proportionality
	| '§' 		(TBD)	// section
	| '★' 		(TBD)	// star
	| '₎'		(TBD)	// subscript parenthesis close
	| '₍'		(TBD)	// subscript parenthesis open
	| '∑' 		(TBD)	// summation
	| '⟩' 		(TBD)	// triangle bracket close
	| '⟨' 		(TBD)	// triangle bracket open
	| '⬜' 		(TBD)	// white large square
