Daijoubu Parser Grammar

---

[ ] control_case ::= '|' <literal> <statement_list>

[ ] control_elif ::= '|' 'elif' '(' <expression> ')' <statement_list>

[ ] control_else ::= '|' 'else' <statement_list>

[ ] control_final ::= '|' <statement_list>

[ ] control_for ::= 'for' '(' <control_for_initial> <expression> <control_for_iterator>* ')' '{' <statement_list> '}'

[ ] control_for_initial ::= [<expression> ',']? [<statement_assignment> ',']*

[ ] control_for_iterator ::= ',' (<statement_assignment> | <statement_unary>)

[ ] control_if ::= 'if' '(' <expression> ')' '{' <statement_list> <control_elif>* <control_else>? '}'

[ ] control_switch ::= 'switch' '(' <expression> ')' '{' <literal> <statement_list> <control_case>* <control_else>? <control_case>* '}'

[ ] expression ::= 

[ ] expression_list ::= <expression> [',' <expression>]*
	| <EMPTY>

[ ] literal ::= <literal_boolean> | <literal_numeric> | <literal_string>

[ ] parameter ::= <type> <identifier>

[ ] parameter_list ::= <parameter> [',' <parameter>]*
	| <EMPTY>

[X] statement ::= <statement_assignment> | <statement_control> | <statement_function_call> 
	| <statement_function_define> | <statement_native_call>  | <statement_unary>

[ ] statement_list ::= <statement>*

[ ] statement_assignment ::= <type> <identifier>
	| <type>? <identifier> ('⇐' | '<-') <expression>
	| <type>? <identifier> ('⇔' | '<->') <expression>

[ ] statement_control ::= <control_if> | <control_for> | <control_switch>

[ ] statement_function_call ::= <identifier> '(' <expression_list> ')'

[ ] statement_function_define ::= <identifier> '(' <parameter_list> ')' '{' <statement_list> '}'

[ ] statement_native_call ::= 'show' '(' <expression> ')'

[ ] statement_unary ::= ('‡' | '¦' | '++' | '--') <identifier>
